<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.mango.member.MemberMapper">
	
	<!-- 로그인 -->
	<select id="getLogin" parameterType="MemberVO" resultMap="getLoginResult">
		SELECT M.ID, M.PW, M.USERTYPE, MF.FILENUM, MF.FILENAME FROM
			MEMBER M
			LEFT OUTER JOIN
			MEMBER_FILE MF
			USING(ID)
		WHERE ID = #{id} AND PW = #{pw}
	</select>
	
	<!-- 프로필 사진 ResultMap -->
	<resultMap type="MemberVO" id="getLoginResult">
		<id column="id" property="id"/>
		<result column="pw" property="pw"/>
		<result column="userType" property="userType"/>
			<association property="memberFileVO" javaType="MemberFileVO">
				<id column="fileNum" property="fileNum"/>
				<result column="fileName" property="fileName"/>
			</association>
	</resultMap>
	
	<!-- 프로필 사진 리스트 -->
	<select id="getFileList" parameterType="MemberFileVO" resultType="MemberFileVO">
		SELECT FILENUM, ID, FILENAME, ORINAME FROM MEMBER_FILE WHERE ID = #{id}
	</select>
	
	<!-- ID 중복 검사 -->
	<select id="getId" parameterType="MemberVO" resultType="MemberVO">
		SELECT ID FROM MEMBER WHERE ID = #{id}
	</select>
	
	<!-- 회원 가입 -->
	<insert id="setAddMember" parameterType="MemberVO">
		INSERT INTO MEMBER (ID, PW, NAME, EMAIL, PHONE, GENDER, JOINDATE, USERTYPE, BLACKLIST, BUSINESSOK)
		VALUES(#{id}, #{pw}, #{name}, #{email}, #{phone}, #{gender}, NOW(), 1, 0, 0)
	</insert>
	
	<!-- 사진 업로드 -->
	<insert id="setPhoto" parameterType="MemberFileVO">
		INSERT INTO MEMBER_FILE (FILENUM, ID, FILENAME, ORINAME)
		VALUES(NULL, #{id}, #{fileName}, #{oriName})
	</insert>
	
	<!-- 마이페이지 -->
	<select id="getMyPage" parameterType="MemberVO" resultType="MemberVO">
		SELECT NAME, EMAIL, PHONE, GENDER, JOINDATE, USERTYPE,
		POSTCODE, ADDRESS, DETAILADDRESS, EXTRAADDRESS, BLACKLIST
		FROM MEMBER WHERE ID = #{id}
	</select>
	
	<!-- 회원정보 업데이트 -->
	<update id="setUpdate" parameterType="MemberVO">
		UPDATE MEMBER SET NAME = #{name}, PHONE = #{phone}, EMAIL = #{email}, ADDRESS = #{address},
		POSTCODE = #{postCode}, DETAILADDRESS = #{detailAddress}, EXTRAADDRESS = #{extraAddress}
		WHERE ID = #{id}
	</update>
	
	<!-- 가게 사진 업로드 -->
	<insert id="setRestaurantPhoto">
		INSERT INTO REST_FILE(FILENUM, RESTAURANTNUM, FILENAME, ORINAME)
		VALUES (NULL, #{restaurantNum}, #{fileName}, #{oriName})
	</insert>
	
	<!-- 사업자 등록 -->
	<insert id="setBusinessApplication" parameterType="RestaurantVO" 
	useGeneratedKeys="true" keyProperty="restaurantNum">
		INSERT INTO RESTAURANT (RESTAURANTNUM, RESTAURANTNAME, ID, CATEGORYNUM, BUSINESSNUM, 
		ADDRESS, POSTCODE, DETAILADDRESS, EXTRAADDRESS, INTRODUCTION, PARKINGCHECK, KIDCHECK)
		VALUES(#{restaurantNum}, #{restaurantName}, #{id}, #{categoryNum}, #{businessNum}, 
		#{address}, #{postCode}, #{detailAddress}, #{extraAddress}, #{introduction}, 
		#{parkingCheck}, #{kidCheck})
	</insert>
		
	<!-- 사업자 등록 후 승인처리 -->
	<update id="setBusinessUserType" parameterType="MemberVO">
		UPDATE MEMBER SET BUSINESSOK = 1 WHERE ID = #{id}
	</update>
	
	<!-- 위시리스트 등록 -->
	<insert id="setWishlist" parameterType="WishlistVO">
	<!-- IGNORE : 중복이 발생하면 삽입하려는 Row를 무시함 -->
		INSERT IGNORE INTO WISHLIST (WISHNUM, RESTAURANTNUM, ID, CATEGORYNUM)
		VALUES (NULL, #{restaurantNum}, #{id}, #{categoryNum})
	</insert>
	
	<!-- 위시리스트 카운트 출력 -->
	<select id="getTotalWishCount" parameterType="WishlistVO" resultType="Long">
		SELECT COUNT(WISHNUM) FROM WISHLIST WHERE ID = #{id}
	</select>
	
	<!-- 위시리스트 리스트 출력 -->
	<select id="getWishlist" parameterType="WishlistVO" resultMap="getResultWishlist">
		SELECT W.WISHNUM, W.ID, W.CATEGORYNUM, R.RESTAURANTNUM, R.ID,
		R.RESTAURANTNAME, R.ADDRESS, RF.FILENUM, RF.FILENAME 
		FROM 
			WISHLIST W
			LEFT OUTER JOIN
			RESTAURANT R
			USING (RESTAURANTNUM)
			LEFT OUTER JOIN
			REST_FILE RF
			USING (RESTAURANTNUM)
		WHERE W.ID = #{id} ORDER BY WISHNUM DESC LIMIT #{pager.startRow}, #{pager.perPage}
	</select>
	
	<resultMap type="WishlistVO" id="getResultWishlist">
		<id column="wishNum" property="wishNum"/>
		<result column="id" property="id" />
		<result column="categoryNum" property="categoryNum" />
			<collection property="restaurantVOs" javaType="List" ofType="RestaurantVO">
				<id column="restaurantNum" property="restaurantNum"/>
				<result column="id" property="id"/>
				<result column="restaurantName" property="restaurantName"/>
				<result column="address" property="address"/>
			</collection>
				<collection property="restFileVO" javaType="List" ofType="ResFilesVO">
					<id column="fileNum" property="fileNum"/>
					<result column="fileName" property="fileName"/>
				</collection>
	</resultMap>
	
	<!-- 위시리스트 삭제 -->
	<delete id="setDeleteWishlist">
		DELETE FROM WISHLIST WHERE WISHNUM = #{wishNum} AND ID = #{id}
	</delete>
	
	<!-- 평점 카운트 출력 -->
	<select id="getTotalRatingCount" parameterType="ReviewVO" resultType="Long">
		SELECT COUNT(REVIEWNUM) FROM REVIEW WHERE ID = #{id}
	</select>
	
	<!-- 평점 리스트 -->
	<select id="getRatingList" parameterType="ReviewVO" resultMap="getResultRatingList">
		SELECT R.ID, R.REVIEWNUM, R.RESTAURANTNUM, R.STAR, R.CONTENTS, RF.FILENUM, 
		RF.FILENAME, RR.ADDRESS, RR.RESTAURANTNAME FROM
			REVIEW R 
			LEFT OUTER JOIN
			REVIEW_FILE RF
			USING (REVIEWNUM)
			LEFT OUTER JOIN
			RESTAURANT RR
			USING (RESTAURANTNUM)
		WHERE R.ID = #{id} ORDER BY REVIEWNUM DESC LIMIT #{pager.startRow}, #{pager.perPage}
	</select>
	
	<resultMap type="ReviewVO" id="getResultRatingList">
		<id column="reviewNum" property="reviewNum"/>
		<result column="id" property="id"/>
		<result column="restaurantNum" property="restaurantNum"/>
		<result column="star" property="star"/>
		<result column="contents" property="contents"/>
			<collection property="reviewFilesVOs" javaType="List" ofType="ReviewFilesVO">
				<id column="fileNum" property="fileNum"/>
				<result column="reviewNum" property="reviewNum"/>
				<result column="fileName" property="fileName"/>
			</collection>
			<collection property="restaurantVOs" javaType="List" ofType="RestaurantVO">
				<result column="address" property="address"/>
				<result column="restaurantName" property="restaurantName"/>
			</collection>
	</resultMap>
	
	<!-- 회원 탈퇴 -->
	<delete id="setDelete" parameterType="MemberVO">
		DELETE FROM MEMBER WHERE ID = #{id} AND PW = #{pw}
	</delete>
	
</mapper>